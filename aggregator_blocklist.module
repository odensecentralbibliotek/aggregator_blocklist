<?php

/**
 * Implements hook_init()
 */
function aggregator_blocklist_init() {
  drupal_add_css(drupal_get_path('module', 'aggregator_blocklist') . '/css/aggregator_blocklist.css');
}

/**
 * Implements hook_block_info().
 */
function aggregator_blocklist_block_info() {
  $blocks = array();
  $result = db_query('SELECT cid, title FROM {aggregator_category} ORDER BY title');
  foreach ($result as $category) {
    $blocks['category-' . $category->cid]['info'] = t('!title category latest items', array('!title' => "Feed (blocklist): ".$category->title));
  }
  $result = db_query('SELECT fid, title FROM {aggregator_feed} WHERE block <> 0 ORDER BY fid');
  foreach ($result as $feed) {
    $blocks['feed-' . $feed->fid]['info'] = t('!title feed latest items', array('!title' => "Feed (blocklist): ".$feed->title));
  }
  return $blocks;
}

/**
 * implements hook_block_view();
 */
function aggregator_blocklist_block_view($delta = '') {
  if (user_access('access news feeds')) {
    $block = array();
    list($type, $id) = explode('-', $delta);
    $result = FALSE;
    switch ($type) {
      case 'feed':
        $query = db_select("aggregator_feed", "f");
        $query->leftJoin("file_managed", "fm", "fm.fid = f.ffid");
        $query_and = db_and();
        $query_and->condition("block", "0", "<>")
                  ->condition("f.fid", $id);
        $query->fields("f", array("url", "title", "block", "ffid", "fid", "rss_origin_url"))
              ->fields("fm", array("uri"))
              ->condition($query_and);
        $feed_result = $query->execute();
        $feed = $feed_result->fetchAssoc();
        if($feed) {
          $block['subject'] = check_plain($feed["title"]);
          $result = db_query_range("SELECT * FROM {aggregator_item} WHERE fid = :fid ORDER BY timestamp DESC, iid DESC", 0, $feed["block"], array(':fid' => $id));
          //$read_more = theme('more_link', array('url' => $feed["url"], 'title' => t("View this feed's recent news.")));
        }
        break;

      case 'category':
        if ($category = db_query('SELECT cid, url, title, block FROM {aggregator_category} WHERE cid = :cid', array(':cid' => $id))->fetchObject()) {
          $block['subject'] = check_plain($category->title);
          $result = db_query_range('SELECT i.* FROM {aggregator_category_item} ci LEFT JOIN {aggregator_item} i ON ci.iid = i.iid WHERE ci.cid = :cid ORDER BY i.timestamp DESC, i.iid DESC', 0, $category->block, array(':cid' => $category->cid));
          //$read_more = theme('more_link', array('url' => $category->url, 'title' => t("View this category's recent news.")));
        }
        break;
    }

    $items = array();
    if (!empty($result)) {
      foreach ($result as $item) {
        $items[] = theme('aggregator_blocklist_block_item', array('item' => $item));
      }
    }

    // Only display the block if there are items to show.
    if (count($items) > 0) {
      $block['content'] = theme('aggregator_blocklist_itemlist', array('items' => $items, 'feed' => $feed, 'read_more' => $read_more));
    }
    return $block;
  }
}

/**
 * Returns HTML for an individual feed item for display in the block.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: The item to be displayed.
 *   - feed: Not used.
 *
 * @ingroup themeable
 */
function theme_aggregator_blocklist_block_item($variables) {
  // Display the external link to the item.
  $output  = '<div class="blocklist-item">';
  $output .= '<span class="rss-date">' . date("d.m.Y", $variables['item']->timestamp) . '</span>';
  $output .= '<span class="rss-link"><a href="' . check_url($variables['item']->link) . '">' . check_plain($variables['item']->title) . '</a></span>';
  $output .= '</div>';
  return $output;
}

/**
 * Implements theme_hook().
 */
function theme_aggregator_blocklist_itemlist($variables) {
  $output = "";
  $url = file_create_url($variables['feed']['uri']);
  $output .= '<div class="rssblock-itemlist">';
  $output .= implode("\n", $variables['items']);
  $rss_title = $variables['feed']['title'];
  $page_url = ($variables['feed']['rss_origin_url'] == "") ? $variables['feed']['url'] : $variables['feed']['rss_origin_url'];
  $output .= '<a href="' . $page_url . '">';
  $file = $variables['feed']['ffid'] ? file_load($variables['feed']['ffid']) : FALSE;
  if(is_valid_image($url)) {
    /**
     * scale thumbnail
     *
    $vars = array(
      'element' => array (
        '#name' => $variables['feed']['title'],
        '#file' => $file,
        '#show_names' => FALSE,
        '#add_link' => FALSE,
        '#children' => '<img class="rss_image" alt="logo" src="' . $url . '">',
      ),
    );
    $output .= theme('media_thumbnail', $vars);
     * 
     */
    $output .= '<div class="rss-image">';
    $output .= '<a href="' . $page_url . '">';
    $output .= '<img src="' . $url . '" alt="' . $rss_title . '" title=" ' . $page_url . '">';
    $output .= '</a>';
    $output .= '</div>';
  }
  $output .= '</a>';
  $output .= '</div>';
  return $output;
}

/**
 * Returns a mime-type for valid image urls, false for invalid image urls
 * @param type $url
 * @return type String
 */
function is_valid_image($url) {
  if($url=="") return false;
  $info = getimagesize($url);
  if(isset($info["mime"])) {
    $valid_image_type = array(
      'image/jpeg', 'image/pjpeg', 'image/png', 'image/x-png', 'image/gif'
    );
    if(in_array($info['mime'], $valid_image_type)) {
      return $info['mime'];
    }
  }
  return false;
}

/**
 * Implements hook_theme().
 */
function aggregator_blocklist_theme() {
  return array(
    'aggregator_blocklist_itemlist' => array(
      'variables' => array(
        'items' => array(
          'item' => NULL,
        )
      ),
    ),
    'aggregator_blocklist_block_item' => array(
      'variables' => array(
        'item' => array(
          'timestamp', NULL,
          'link', NULL,
          'title', NULL,
        ),
        'feed' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function aggregator_blocklist_permission() {
  return array(
    'administer news feeds' => array(
      'title' => t('Administer news feeds'),
    ),
    'access news feeds' => array(
      'title' => t('View news feeds'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function aggregator_blocklist_form_aggregator_form_feed_alter(&$form, &$form_state, &$form_id) {
  /* @var $test type */
  $q = db_select("aggregator_feed", "f");
  $q->fields("f", array("ffid", "rss_origin_url"))
    ->condition("fid", $form['fid']['#value']);
  $r = $q->execute();
  $feed = $r->fetchAssoc();
  if($feed) {
    $file = $feed["ffid"] ? file_load($feed["ffid"]) : FALSE;
  }

  /**
   * Feed object available through form_state:
   * $form_state['build_info']['args'][0]
   **/
  $form['ffid'] = array(
    '#type' => 'media',
    '#title' => t('Attach image'),
    '#description' => t('The fully-qualified URL of the feed image.'),
    '#media_options' => array(
      'global' => array(
        'types' => array('image'),
      ),
    ),
    '#value' => array("fid" => $file->fid),
  );
  
  $form['rss_origin_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL to RSS website'),
    '#description' => t('The fully-qualified URL of the feed website.'),
    '#default_value' => $feed['rss_origin_url'],
  );

  if ($form_id == 'aggregator_form_feed') {
    /**
     * aggregator_blocklist will take over submit and validate
     */
    $form['#submit'][0] = 'aggregator_blocklist_form_feed_submit';
    $form['#validate'][0] = 'aggregator_blocklist_form_feed_validate';
  }
}

/**
 * Form submission handler for aggregator_form_feed().
 *
 * @see aggregator_blocklist_form_feed_validate()
 */
function aggregator_blocklist_form_feed_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Delete')) {
    $title = $form_state['values']['title'];
    // Unset the title.
    unset($form_state['values']['title']);
  }
  $form_state['values']['ffid'] = $form_state['input']['fid'];
  aggregator_blocklist_save_feed($form_state['values']);
  if (isset($form_state['values']['fid'])) {
    if (isset($form_state['values']['title'])) {
      drupal_set_message(t('The feed %feed has been updated.', array('%feed' => $form_state['values']['title'])));
      if (arg(0) == 'admin') {
        $form_state['redirect'] = 'admin/config/services/aggregator/';
        return;
      }
      else {
        $form_state['redirect'] = 'aggregator/sources/' . $form_state['values']['fid'];
        return;
      }
    }
    else {
      watchdog('aggregator', 'Feed %feed deleted.', array('%feed' => $title));
      drupal_set_message(t('The feed %feed has been deleted.', array('%feed' => $title)));
      if (arg(0) == 'admin') {
        $form_state['redirect'] = 'admin/config/services/aggregator/';
        return;
      }
      else {
        $form_state['redirect'] = 'aggregator/sources/';
        return;
      }
    }
  }
  else {
    watchdog('aggregator', 'Feed %feed added.', array('%feed' => $form_state['values']['title']), WATCHDOG_NOTICE, l(t('view'), 'admin/config/services/aggregator'));
    drupal_set_message(t('The feed %feed has been added.', array('%feed' => $form_state['values']['title'])));
  }
}

/**
 * Add/edit/delete an aggregator feed.
 *
 * @param $edit
 *   An associative array describing the feed to be added/edited/deleted.
 */
function aggregator_blocklist_save_feed($edit) {
  if (!empty($edit['fid'])) {
    // An existing feed is being modified, delete the category listings.
    db_delete('aggregator_category_feed')
      ->condition('fid', $edit['fid'])
      ->execute();
  }
  if (!empty($edit['fid']) && !empty($edit['title'])) {
    db_update('aggregator_feed')
      ->condition('fid', $edit['fid'])
      ->fields(array(
        'title' => $edit['title'],
        'url' => $edit['url'],
        'ffid' => $edit['ffid'],
        'refresh' => $edit['refresh'],
        'block' => $edit['block'],
        'rss_origin_url' => $edit['rss_origin_url'],
      ))
      ->execute();
  }
  elseif (!empty($edit['fid'])) {
    $iids = db_query('SELECT iid FROM {aggregator_item} WHERE fid = :fid', array(':fid' => $edit['fid']))->fetchCol();
    if ($iids) {
      db_delete('aggregator_category_item')
        ->condition('iid', $iids, 'IN')
        ->execute();
    }
    db_delete('aggregator_feed')->
      condition('fid', $edit['fid'])
      ->execute();
    db_delete('aggregator_item')
      ->condition('fid', $edit['fid'])
      ->execute();
    // Make sure there is no active block for this feed.
    if (module_exists('block')) {
      db_delete('block')
        ->condition('module', 'aggregator')
        ->condition('delta', 'feed-' . $edit['fid'])
        ->execute();
    }
  }
  elseif (!empty($edit['title'])) {
    $edit['fid'] = db_insert('aggregator_feed')
      ->fields(array(
        'title' => $edit['title'],
        'url' => $edit['url'],
        'refresh' => $edit['refresh'],
        'block' => $edit['block'],
        'link' => '',
        'description' => '',
        'image' => '',
        'ffid' => $edit['ffid'],
        'rss_origin_url' => $edit['rss_origin_url'],
      ))
      ->execute();

  }
  if (!empty($edit['title'])) {
    // The feed is being saved, save the categories as well.
    if (!empty($edit['category'])) {
      foreach ($edit['category'] as $cid => $value) {
        if ($value) {
          db_insert('aggregator_category_feed')
            ->fields(array(
              'fid' => $edit['fid'],
              'cid' => $cid,
            ))
            ->execute();
        }
      }
    }
  }
}

/**
 * Form validation handler for aggregator_blocklist_form_feed().
 *
 * @see aggregator_blocklist_form_feed_submit()
 */
function aggregator_blocklist_form_feed_validate($form, &$form_state) {
  if ($form_state['values']['op'] == t('Save')) {
    // Ensure URL is valid.
    if (!valid_url($form_state['values']['url'], TRUE)) {
      form_set_error('url', t('The URL %url is invalid. Enter a fully-qualified URL, such as http://www.example.com/feed.xml.', array('%url' => $form_state['values']['url'])));
    }
    // Check for duplicate titles.
    if (isset($form_state['values']['fid'])) {
      $result = db_query("SELECT title, url FROM {aggregator_feed} WHERE (title = :title OR url = :url) AND fid <> :fid", array(':title' => $form_state['values']['title'], ':url' => $form_state['values']['url'], ':fid' => $form_state['values']['fid']));
    }
    else {
      $result = db_query("SELECT title, url FROM {aggregator_feed} WHERE title = :title OR url = :url", array(':title' => $form_state['values']['title'], ':url' => $form_state['values']['url']));
    }
    foreach ($result as $feed) {
      if (strcasecmp($feed->title, $form_state['values']['title']) == 0) {
        form_set_error('title', t('A feed named %feed already exists. Enter a unique title.', array('%feed' => $form_state['values']['title'])));
      }
      if (strcasecmp($feed->url, $form_state['values']['url']) == 0) {
        form_set_error('url', t('A feed with this URL %url already exists. Enter a unique URL.', array('%url' => $form_state['values']['url'])));
      }
    }
  }
}
