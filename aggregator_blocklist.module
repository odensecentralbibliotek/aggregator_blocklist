<?php
/**
 * @file
 * Presents data from the aggregator module in a more stylish way
 */

/**
 * Implements hook_init()
 */
function aggregator_blocklist_init() {
  drupal_add_css(drupal_get_path('module', 'aggregator_blocklist') . '/css/aggregator_blocklist.css');
}

/**
 * implements hook_block_view();
 */
function aggregator_blocklist_block_view($delta = '') {
  if (user_access('access news feeds')) {
    $block = array();
    list($type, $id) = explode('-', $delta);
    $result = FALSE;
    switch ($type) {
      case 'feed':
        $query = db_select("aggregator_feed", "f");
        $query->join("aggregator_blocklist_feed_extension", "fe", "fe.af_fid = f.fid");
        $query->leftJoin("file_managed", "fm", "fm.fid = fe.fm_fid");
        $query_and = db_and();
        $query_and->condition("block", "0", "<>")
                  ->condition("f.fid", $id);
        $query->fields("f", array(
          "url", "title", "block", "fid"))
              ->fields("fm", array("uri"))
              ->fields("fe", array("fm_fid", "rss_origin_url"))
              ->condition($query_and);
        $feed_result = $query->execute();
        $feed = $feed_result->fetchAssoc();
        $more_url = (!$feed['rss_origin_url']) ? $feed['url'] : $feed['rss_origin_url'];
        $read_more = '<div class="more-link">' . l(t('See more'), $more_url, array(
          'attributes' => array(
            'title' => t($feed['title']),
          ),
        )) . '</div>';
        if($feed) {
          $block['subject'] = check_plain($feed["title"]);
          $result = db_query_range("SELECT * FROM {aggregator_item} WHERE fid = :fid ORDER BY timestamp DESC, iid DESC", 0, $feed["block"], array(':fid' => $id));
        }
        break;

      case 'category':
        if ($category = db_query('SELECT cid, url, title, block FROM {aggregator_category} WHERE cid = :cid',
            array(':cid' => $id))->fetchObject()) {
          $block['subject'] = check_plain($category->title);
          $result = db_query_range('SELECT i.* FROM {aggregator_category_item} ci LEFT JOIN {aggregator_item} i ON ci.iid = i.iid WHERE ci.cid = :cid ORDER BY i.timestamp DESC, i.iid DESC', 0, $category->block, array(':cid' => $category->cid));
        }
        break;
    }

    $items = array();
    if (!empty($result)) {
      foreach ($result as $item) {
        $items[] = theme('aggregator_blocklist_block_item', array('item' => $item));
      }
    }

    // Only display the block if there are items to show.
    if (count($items) > 0) {
      $block['content'] = theme(
        'aggregator_blocklist_itemlist', array(
          'items' => $items,
          'feed' => $feed,
          'read_more' => $read_more,
        )
      );
    }
    return $block;
  }
}

/**
 * Returns HTML for an individual feed item for display in the block.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: The item to be displayed.
 *   - feed: Not used.
 *
 * @ingroup themeable
 */
function theme_aggregator_blocklist_block_item($variables) {
  // Display the external link to the item.
  $output  = '<div class="blocklist-item">';
  $output .= '<span class="rss-date">' . date("d/m Y", $variables['item']->timestamp) . '</span>';
  $output .= '<span class="rss-link"><a href="' . check_url($variables['item']->link) . '">' . check_plain($variables['item']->title) . '</a></span>';
  $output .= '</div>';
  return $output;
}

/**
 * Implements theme_hook().
 *
 * @param array $variables
 *   An associative array containing:
 *   - items: The list of items to be displayed.
 *   - feed: feed data like associated image and url to the site where the rss originates
 *
 * @return string
 *   the themed output of the list
 */
function theme_aggregator_blocklist_itemlist($variables) {
  $output = "";
  $url = file_create_url($variables['feed']['uri']);
  $output .= '<div class="rssblock-itemlist">';
  $output .= implode("\n", $variables['items']);
  $rss_title = $variables['feed']['title'];
  $page_url = ($variables['feed']['rss_origin_url'] == "") ? $variables['feed']['url'] : $variables['feed']['rss_origin_url'];
  $file = $variables['feed']['fm_fid'] ? file_load($variables['feed']['fm_fid']) : FALSE;
  if(is_valid_image($variables['feed']['uri'])) {
    /**
     * scale thumbnail
     *
    $vars = array(
      'element' => array (
        '#name' => $variables['feed']['title'],
        '#file' => $file,
        '#show_names' => FALSE,
        '#add_link' => FALSE,
        '#children' => '<img class="rss_image" alt="logo" src="' . $url . '">',
      ),
    );
    $output .= theme('media_thumbnail', $vars);
     */
    $output .= '<div class="rss-image">';
    $output .= '<a href="' . $page_url . '">';
    $output .= '<img src="' . $url . '" alt="' . $rss_title . '" title=" ' . $page_url . '">';
    $output .= '</a>';
    $output .= '</div>';
  }
  else {
    $output .= $variables['read_more'];
  }
  $output .= '</div>';
  return $output;
}

/**
 * Returns a mime-type for valid image urls, false for invalid image urls
 *
 * @param string $url
 *   the url of the image to test
 *
 * @return bool
 *   returns true if the $url points to a valid image
 */
function is_valid_image($url) {
  if($url == "") {
    return FALSE;
  }
  $info = getimagesize($url);
  if(isset($info["mime"])) {
    $valid_image_type = array(
      'image/jpeg', 'image/pjpeg', 'image/png', 'image/x-png', 'image/gif'
    );
    if(in_array($info['mime'], $valid_image_type)) {
      return $info['mime'];
    }
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function aggregator_blocklist_theme() {
  return array(
    'aggregator_blocklist_itemlist' => array(
      'variables' => array(
        'items' => array(
          'item' => NULL,
        )
      ),
    ),
    'aggregator_blocklist_block_item' => array(
      'variables' => array(
        'item' => array(
          'timestamp', NULL,
          'link', NULL,
          'title', NULL,
        ),
        'feed' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function aggregator_blocklist_permission() {
  return array(
    'administer news feeds' => array(
      'title' => t('Administer news feeds'),
    ),
    'access news feeds' => array(
      'title' => t('View news feeds'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function aggregator_blocklist_form_aggregator_form_feed_alter(&$form, &$form_state, &$form_id) {
  /* @var $test type */
  $file = new stdClass();
  $file->fid = NULL;
  $feed = array();
  $feed["rss_origin_url"] = NULL;
  if(isset($form['fid']['#value'])) {
    $q = db_select("aggregator_feed", "f");
    $q->join("aggregator_blocklist_feed_extension", "fe", "fe.af_fid = f.fid");
    $q->fields("fe", array("fm_fid", "rss_origin_url", "af_fid"))
      ->condition("af_fid", $form['fid']['#value']);
    $r = $q->execute();
    $feed = $r->fetchAssoc();
    if($feed) {
      $file = $feed["fm_fid"] ? file_load($feed["fm_fid"]) : FALSE;
    }
  }
  /**
   * Feed object available through form_state:
   * $form_state['build_info']['args'][0]
   **/
  $form['fm_fid'] = array(
    '#type' => 'media',
    '#title' => t('Attach image'),
    '#description' => t('The fully-qualified URL of the feed image.'),
    '#media_options' => array(
      'global' => array(
        'types' => array('image'),
      ),
    ),
    '#value' => array("fid" => $file->fid),
  );
  $form['rss_origin_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL to RSS website'),
    '#description' => t('The fully-qualified URL of the feed website.'),
    '#default_value' => $feed['rss_origin_url'],
  );

  if ($form_id == 'aggregator_form_feed') {
    // aggregator_blocklist will take over submit and validate //
    $form['#submit'][0] = 'aggregator_blocklist_form_feed_submit';
    $form['#validate'][0] = 'aggregator_form_feed_validate';
  }
}

/**
 * Form submission handler for aggregator_form_feed().
 *
 * @see aggregator_blocklist_form_feed_validate()
 */
function aggregator_blocklist_form_feed_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Delete')) {
    $title = $form_state['values']['title'];
    // Unset the title.
    unset($form_state['values']['title']);
  }
  /*
  if ($form_state['values']['op'] == t('Save')) {
    $fid = $form_state['values']['fid'];
    // Unset the feed id.
    unset($form_state['values']['fid']);
  }*/
  $form_state['values']['fm_fid'] = $form_state['input']['fid'];
  aggregator_save_feed($form_state['values']);
  //TODO save extra table
  aggregator_blocklist_save_feed($form_state['values']);
  if (isset($form_state['values']['fid'])) {
    if (isset($form_state['values']['title'])) {
      drupal_set_message(t('The feed %feed has been updated.', array('%feed' => $form_state['values']['title'])));
      if (arg(0) == 'admin') {
        $form_state['redirect'] = 'admin/config/services/aggregator/';
        return;
      }
      else {
        $form_state['redirect'] = 'aggregator/sources/' . $form_state['values']['fid'];
        return;
      }
    }
    else {
      watchdog('aggregator', 'Feed %feed deleted.', array('%feed' => $title));
      drupal_set_message(t('The feed %feed has been deleted.', array('%feed' => $title)));
      if (arg(0) == 'admin') {
        $form_state['redirect'] = 'admin/config/services/aggregator/';
        return;
      }
      else {
        $form_state['redirect'] = 'aggregator/sources/';
        return;
      }
    }
  }
  else {
    watchdog('aggregator', 'Feed %feed added.', array('%feed' => $form_state['values']['title']), WATCHDOG_NOTICE, l(t('view'), 'admin/config/services/aggregator'));
    drupal_set_message(t('The feed %feed has been added.', array('%feed' => $form_state['values']['title'])));
  }
}

/**
 * Add/edit/delete an aggregator feed.
 *
 * @param array $edit
 *   An associative array describing the feed to be added/edited/deleted.
 */
function aggregator_blocklist_save_feed($edit) {
  if (!empty($edit['fid']) && !empty($edit['title'])) {
    //condition update
    //drupal_set_message("UPDATE");
    db_update('aggregator_blocklist_feed_extension')
      ->condition('af_fid', $edit['fid'])
      ->fields(array(
        'fm_fid' => $edit['fm_fid'],
        'rss_origin_url' => $edit['rss_origin_url'],
      ))
      ->execute();
  }
  elseif (!empty($edit['fid'])) {
    //condition delete
    //drupal_set_message("DELETE");
    db_delete('aggregator_blocklist_feed_extension')
      ->condition('af_fid', $edit['fid'])
      ->execute();
  }
  elseif (!empty($edit['title'])) {
    // condition new
    //drupal_set_message("CREATE");
    $fid = db_select("aggregator_feed", "f")
        ->fields("f", array("fid"))
        ->condition("title", $edit["title"])
        ->execute()
        ->fetchField();
    $edit['af_fid'] = $fid;
    $edit['fe_fid'] = db_insert('aggregator_blocklist_feed_extension')
      ->fields(array(
        'af_fid' => $edit['af_fid'],
        'fm_fid' => $edit['fm_fid'],
        'rss_origin_url' => $edit['rss_origin_url'],
      ))
      ->execute();

  }
}

/**
 * Implements hook_block_info().
 */
function aggregator_blocklist_block_info() {
  $blocks = array();
  $result = db_query('SELECT cid, title FROM {aggregator_category} ORDER BY title');
  foreach ($result as $category) {
    $blocks['category-' . $category->cid]['info'] = t(
      '!title category latest items',
      array('!title' => "Feed (blocklist): " . $category->title));
  }
  $result = db_query('SELECT fid, title FROM {aggregator_feed} WHERE block <> 0 ORDER BY fid');
  foreach ($result as $feed) {
    $blocks['feed-' . $feed->fid]['info'] = t(
      '!title feed latest items',
      array('!title' => "Feed (blocklist): " . $feed->title));
  }
  return $blocks;
}
